/*! For license information please see 40ec3bc1.db610330.js.LICENSE.txt */
(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{232:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return u})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return d}));var o=n(1),i=n(9),a=(n(0),n(440)),r=n(449),l=n(439),c=n(444),s={last_modified_on:"2022-10-05",$schema:"/.meta/.schemas/guides.json",title:"How to integrate Qovery with GitHub Actions",description:"Learn how to integrate Qovery with GitHub Actions",author_github:"https://github.com/l0ck3",tags:["type: tutorial","technology: github"],hide_pagination:!0},u={categories:[{name:"tutorial",title:"Tutorial",description:"Simple step-by-step tutorials.",permalink:"/guides/tutorial"}],coverLabel:"How to integrate Qovery with GitHub Actions",description:"Learn how to integrate Qovery with GitHub Actions",permalink:"/guides/tutorial/how-to-integrate-qovery-with-github-actions",readingTime:"9 min read",source:"@site/guides/tutorial/how-to-integrate-qovery-with-github-actions.md",tags:[{label:"type: tutorial",permalink:"/guides/tags/type-tutorial"},{label:"technology: github",permalink:"/guides/tags/technology-github"}],title:"How to integrate Qovery with GitHub Actions",truncated:!1,prevItem:{title:"How to deploy Strapi with PostgreSQL",permalink:"/guides/tutorial/how-to-deploy-strapi-with-postgresql"},nextItem:{title:"How to run commands before the application starts",permalink:"/guides/tutorial/how-to-run-commands-at-application-startup"}},p=[{value:"Goal",id:"goal",children:[]},{value:"Get your application ready",id:"get-your-application-ready",children:[]},{value:"Add your GitHub action Workflow",id:"add-your-github-action-workflow",children:[]},{value:"Push your code",id:"push-your-code",children:[]},{value:"Deploy several applications in the same environment",id:"deploy-several-applications-in-the-same-environment",children:[]},{value:"Advanced use-cases",id:"advanced-use-cases",children:[]},{value:"Conclusion",id:"conclusion",children:[]}],b={rightToc:p};function d(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(a.b)("wrapper",Object(o.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Getting started with Qovery is easy. Just plug your Git repository, and you can deploy your application directly.\nBut in some cases you will want a more advanced CI workflow where some steps need to happen before deployment."),Object(a.b)("p",null,"One of the CI tools you can use for that matter is GitHub Actions."),Object(a.b)(c.a,{name:"guide",mdxType:"Assumptions"},Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"You have a Qovery cluster running."),Object(a.b)("li",{parentName:"ul"},"You are using GitHub Actions as a CI server."),Object(a.b)("li",{parentName:"ul"},"You have a Qovery application deployed."),Object(a.b)("li",{parentName:"ul"},"You have the Qovery CLI installed and configured."))),Object(a.b)("p",null,"If you don't have an application running on Qovery yet, check ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://hub.qovery.com/docs/getting-started/deploy-my-app/"}),"the documentation")," to create one."),Object(a.b)("h2",{id:"goal"},"Goal"),Object(a.b)("p",null,"In this tutorial, we will deploy an application with the official Qovery GitHub action."),Object(a.b)("p",null,"You can find it ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://github.com/marketplace/actions/qovery-deploy"}),"on the marketplace"),"."),Object(a.b)("h2",{id:"get-your-application-ready"},"Get your application ready"),Object(a.b)("p",null,"The first thing we need to do, is to disable automatic deployments. By default, Qovery applications get re-deployed whenever you push some code to the configured branch.\nSince we want to trigger the deployment through GitHub Actions, we need to disable this behavior."),Object(a.b)("p",null,"Go to your environment page, then click ",Object(a.b)("inlineCode",{parentName:"p"},"Settings"),":"),Object(a.b)("p",{align:"center"},Object(a.b)("img",{src:"/img/how-to-integrate-qovery-with-github-actions/1.png",alt:""})),Object(a.b)("p",null,"Then go to ",Object(a.b)("inlineCode",{parentName:"p"},"Deployment")," and on the ",Object(a.b)("inlineCode",{parentName:"p"},"Auto-deploy")," dropdown, select ",Object(a.b)("inlineCode",{parentName:"p"},"Off"),":"),Object(a.b)("p",{align:"center"},Object(a.b)("img",{src:"/img/how-to-integrate-qovery-with-github-actions/2.png",alt:""})),Object(a.b)("p",null,"Click save and close the modal."),Object(a.b)("h2",{id:"add-your-github-action-workflow"},"Add your GitHub action Workflow"),Object(a.b)("p",null,"We will now add a GitHub Actions workflow to your application. Workflow are defined with YAML configuration files that are placed in the code directory of your application.\nAs an example we will define a workflow for a NodeJS application. We will first run our unit tests, then launch the Qovery deployment if the tests pass."),Object(a.b)("p",null,"You can adapt those steps for your own stack and needs. Read the ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://docs.github.com/en/actions"}),"GitHub Actions documentation")," to learn more."),Object(a.b)(r.a,{headingDepth:3,mdxType:"Steps"},Object(a.b)("ol",null,Object(a.b)("li",null,Object(a.b)("h4",{id:"get-the-organization-project-environment-and-application-ids"},"Get the Organization, Project, Environment and Application IDs"),Object(a.b)("p",null,"First we need to get the ids that we will to add to our YAML file:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Open in the ",Object(a.b)("a",Object(o.a)({parentName:"li"},{href:"https://new.console.qovery.com"}),"V3 console")," the application you are interested."),Object(a.b)("li",{parentName:"ul"},'Open the option section and select "Copy identifiers". This will copy in your clipboard all the necessary identifiers')),Object(a.b)("p",{align:"center"},Object(a.b)("img",{src:"/img/how-to-integrate-qovery-with-github-actions/github_action_ids.png",alt:""})),Object(a.b)(l.a,{type:"info",mdxType:"Alert"},Object(a.b)("p",null,'You could use as well names instead of IDs but we strongly encourage you to use IDs to avoid any mistake.\nPlease note that names are case-sensitive - "My App" is different from "my app"'))),Object(a.b)("li",null,Object(a.b)("h4",{id:"create-the-workflows-directory"},"Create the Workflows directory"),Object(a.b)("p",null,"All your workflows files must be stored in a specific ",Object(a.b)("inlineCode",{parentName:"p"},".github/workflows")," directory. Create this directory at the root of your project.")),Object(a.b)("li",null,Object(a.b)("h4",{id:"add-a-test-and-deploy-workflow"},"Add a Test and Deploy workflow"),Object(a.b)("p",null,"In your Workflows folder, create a ",Object(a.b)("inlineCode",{parentName:"p"},"test-and-deploy.yaml")," file with the following content:"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-yaml"}),"name: Test And Deploy to Qovery\non:\n  workflow_call:\n    inputs:\n      organization-id:\n        required: true\n        type: string\n      project-id:\n        required: true\n        type: string\n      environment-id:\n        required: true\n        type: string\n      application-ids:\n        required: true\n        type: string\n    secrets:\n      api-token:\n        required: true\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Install modules\n      run: yarn\n    - name: Run tests\n      run: yarn test\n  deploy:\n    needs: test\n    runs-on: ubuntu-latest\n    name: Deploy on Qovery\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Deploy on Qovery\n        uses: Qovery/qovery-action@v0.10\n        id: qovery\n        with:\n          qovery-organization-id: ${{ inputs.organization-id }}\n          qovery-project-id: ${{ inputs.project-id }}\n          qovery-environment-id: ${{ inputs.environment-id }}\n          qovery-application-ids: ${{ inputs.application-ids }}\n          qovery-api-token: ${{ secrets.api-token }}\n")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"The organization / project / environment / application ids can be retrieved from the URL of your application (see below)."),Object(a.b)("li",{parentName:"ul"},"The ",Object(a.b)("inlineCode",{parentName:"li"},"on")," section contains a ",Object(a.b)("inlineCode",{parentName:"li"},"workflow_call")," directive. It means that this workflow will be triggered when called from another workflow.\nWe're doing this because we won't use this workflow directly. Since we might have several environments to deploy to Qovery depending on the branch, we could have one workflow per environment, and we want to avoid repeating all the steps."),Object(a.b)("li",{parentName:"ul"},"The ",Object(a.b)("inlineCode",{parentName:"li"},"inputs")," and ",Object(a.b)("inlineCode",{parentName:"li"},"secrets")," sections are defining the values that we will need to pass to our workflow"),Object(a.b)("li",{parentName:"ul"},"The ",Object(a.b)("inlineCode",{parentName:"li"},"jobs")," section lists the ",Object(a.b)("inlineCode",{parentName:"li"},"jobs")," and the ",Object(a.b)("inlineCode",{parentName:"li"},"steps")," that in needs to accomplish. Here we have two jobs and five steps:",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"test")," where we check out the code, we install Yarn modules, and we run tests through Jest"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"deploy")," where we check out the code and deploy to Qovery.")))),Object(a.b)("p",null,"Several things worth noting:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Our ",Object(a.b)("inlineCode",{parentName:"li"},"deploy")," job has a ",Object(a.b)("inlineCode",{parentName:"li"},"needs")," instructions, telling GitHub Actions that this job can only run when the ",Object(a.b)("inlineCode",{parentName:"li"},"test")," job succeeds."),Object(a.b)("li",{parentName:"ul"},"The ",Object(a.b)("inlineCode",{parentName:"li"},"with")," section of our last ",Object(a.b)("inlineCode",{parentName:"li"},"deploy")," step contains interpolated strings: ${{ inputs.xxxx }}. Those are values passed to our workflow, that our Qovery action needs. They will be passed from the calling workflow."))),Object(a.b)("li",null,Object(a.b)("h4",{id:"add-an-actual-workflow"},"Add an actual workflow"),Object(a.b)("p",null,"Now we will add a deployment workflow that will be called every time we push our code to the ",Object(a.b)("inlineCode",{parentName:"p"},"main")," branch to deploy our ",Object(a.b)("inlineCode",{parentName:"p"},"production")," environment."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-yaml"}),"name: Deploy to production\non:\n  push:\n    branches:\n      - main\njobs:\n  test-and-deploy:\n    uses: ./.github/workflows/test-and-deploy.yaml\n    with:\n      organization-id: XXX\n      project-id: XXX\n      environment-id: XXX\n      application-ids: XXX\n    secrets:\n      api-token: ${{ secrets.QOVERY_API_TOKEN }}\n")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"We are setting the ",Object(a.b)("inlineCode",{parentName:"li"},"on")," section with a ",Object(a.b)("inlineCode",{parentName:"li"},"push")," directive pointing to the ",Object(a.b)("inlineCode",{parentName:"li"},"main")," branch. It means that this workflow will be executed when we push code to the ",Object(a.b)("inlineCode",{parentName:"li"},"main")," branch."),Object(a.b)("li",{parentName:"ul"},"Our ",Object(a.b)("inlineCode",{parentName:"li"},"test-and-deploy")," job calls our previously created workflow with the ",Object(a.b)("inlineCode",{parentName:"li"},"use")," instruction."),Object(a.b)("li",{parentName:"ul"},"In the ",Object(a.b)("inlineCode",{parentName:"li"},"with")," section, we are passing IDs corresponding to the application we want to deploy."),Object(a.b)("li",{parentName:"ul"},"In the ",Object(a.b)("inlineCode",{parentName:"li"},"secret")," section, we are reading our API key from a GitHub secret we will create later."))),Object(a.b)("li",null,Object(a.b)("h4",{id:"get-a-qovery-api-token"},"Get a Qovery API token"),Object(a.b)("p",null,"To get an API token, use the Qovery CLI:"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-bash"}),"qovery token\n")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Select your organization. (tokens are valid for only one organization)."),Object(a.b)("li",{parentName:"ul"},"Enter a name for your token."),Object(a.b)("li",{parentName:"ul"},"Enter a description for your token.")),Object(a.b)("p",null,"You will get an output like this one:"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{}),"qovery token Qovery: ---- Never share this authentication token and keep it secure ----\nQovery: qov_xxx....\nQovery: ---- Never share this authentication token and keep it secure ----\n")),Object(a.b)(l.a,{type:"warning",mdxType:"Alert"},"At the time of writing, we don't have a way to invalidate tokens. Store it carefully.")),Object(a.b)("li",null,Object(a.b)("h4",{id:"add-your-token-to-your-github-repository-secrets"},"Add your token to your GitHub repository secrets"),Object(a.b)("p",null,"Go to your GitHub repository then to the ",Object(a.b)("inlineCode",{parentName:"p"},"Settings"),":"),Object(a.b)("p",{align:"center"},Object(a.b)("img",{src:"/img/how-to-integrate-qovery-with-github-actions/3.png",alt:""})),Object(a.b)("p",null,"Got to the ",Object(a.b)("inlineCode",{parentName:"p"},"Secrets/Actions")," section and click on ",Object(a.b)("inlineCode",{parentName:"p"},"New repository secret"),":"),Object(a.b)("p",{align:"center"},Object(a.b)("img",{src:"/img/how-to-integrate-qovery-with-github-actions/4.png",alt:""})),Object(a.b)("p",null,"Add your secret with the name ",Object(a.b)("inlineCode",{parentName:"p"},"QOVERY_API_TOKEN")," and save:"),Object(a.b)("p",{align:"center"},Object(a.b)("img",{src:"/img/how-to-integrate-qovery-with-github-actions/5.png",alt:""}))))),Object(a.b)("h2",{id:"push-your-code"},"Push your code"),Object(a.b)("p",null,"We're done with the setup. You can now push your code to the ",Object(a.b)("inlineCode",{parentName:"p"},"main")," branch. If you did it properly, under the ",Object(a.b)("inlineCode",{parentName:"p"},"Actions")," tab on your GitHub repository, you should see your job being run."),Object(a.b)("p",{align:"center"},Object(a.b)("img",{src:"/img/how-to-integrate-qovery-with-github-actions/6.png",alt:""})),Object(a.b)("p",null,"You can click on it to see the details of the jobs. Once the testing phase is green, it will start the deployment job."),Object(a.b)("p",{align:"center"},Object(a.b)("img",{src:"/img/how-to-integrate-qovery-with-github-actions/7.png",alt:""})),Object(a.b)("p",null,"As soon as the job is set up, and it starts actually deploying, go to the Qovery console and check that your application is actually being deployed."),Object(a.b)("p",{align:"center"},Object(a.b)("img",{src:"/img/how-to-integrate-qovery-with-github-actions/8.png",alt:""})),Object(a.b)("h2",{id:"deploy-several-applications-in-the-same-environment"},"Deploy several applications in the same environment"),Object(a.b)("p",null,"Most of the time, you will have several applications in your environment (e.g. a ",Object(a.b)("inlineCode",{parentName:"p"},"backend")," and a ",Object(a.b)("inlineCode",{parentName:"p"},"frontend"),"). To deploy all of them through the action, you can add all the ids separated by commas:"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{}),"...\n\njobs:\n  test-and-deploy:\n    uses: ./.github/workflows/test-and-deploy.yaml\n    with:\n      organization-id: XXX\n      project-id: XXX\n      environment-id: XXX\n      application-ids: app 1,app 2, app 3...\n    secrets:\n      api-token: ${{ secrets.QOVERY_API_TOKEN }}\n")),Object(a.b)("h2",{id:"advanced-use-cases"},"Advanced use-cases"),Object(a.b)(l.a,{type:"warning",mdxType:"Alert"},"At the time of writing, the Qovery GitHub Action only supports deployments. Other features will be added in the future"),Object(a.b)("p",null,"For any use case that's not covered by the official Qovery GitHub Action, you can use the ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://api-doc.qovery.com/"}),"Qovery API")," directly in your workflows.\nAs an example, let's say we want to append the GitHub Actions Workflow execution ID to our environment name after each deployment:"),Object(a.b)(r.a,{headingDepth:3,mdxType:"Steps"},Object(a.b)("ol",null,Object(a.b)("li",null,Object(a.b)("h4",{id:"add-a-shell-script"},"Add a shell script"),Object(a.b)("p",null,"First we will add a shell script that will make the necessary calls to the Qovery API.\nCreate a ",Object(a.b)("inlineCode",{parentName:"p"},".github/scripts")," directory, and add a file called ",Object(a.b)("inlineCode",{parentName:"p"},"add-run-id-to-env-name.sh")," with the following content:"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-bash"}),'#!/usr/bin/env bash\n\nset -eo pipefail\n\necho "Getting the current environment name"\nenvName=$(curl -fs -X GET -H "Authorization: Token $QOVERY_API_TOKEN" \\\n    "https://api.qovery.com/environment/$ENVIRONMENT_ID" | jq -r .name)\n\nif [[ $envName == *"- #"* ]];\nthen\n    newEnvName=$(echo $envName | sed "s/#.*/#$GITHUB_RUN_ID/")\nelse\n    newEnvName="$envName - #$GITHUB_RUN_ID"\nfi\n\necho "New environment name: $newEnvName"\n\necho "Renaming the base environment ..."\n\ncurl -fs -o /dev/null -X PUT -d "{\\"name\\": \\"$newEnvName\\"}" -H \'Content-type: application/json\' -H "Authorization: Token $QOVERY_API_TOKEN" \\\n    "https://api.qovery.com/environment/$ENVIRONMENT_ID"\n\necho "Done!"\n\n## keep going\nexit 0\n')),Object(a.b)("p",null,"Make this file executable:"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-bash"}),"chmod +x .github/scripts/add-run-id-to-env-name.sh\n"))),Object(a.b)("li",null,Object(a.b)("h4",{id:"add-a-job-to-our-test-and-deploy-workflow"},"Add a job to our Test and Deploy Workflow"),Object(a.b)("p",null,"Edit the ",Object(a.b)("inlineCode",{parentName:"p"},"test-and-deploy.yaml")," workflow configuration file so it now looks like this:"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-yaml"}),"name: Test And Deploy to Qovery\non:\n  workflow_call:\n    inputs:\n      organization-id:\n        required: true\n        type: string\n      project-id:\n        required: true\n        type: string\n      environment-id:\n        required: true\n        type: string\n      application-ids:\n        required: true\n        type: string\n    secrets:\n      api-token:\n        required: true\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Install modules\n        run: yarn\n      - name: Run tests\n        run: yarn test\n  deploy:\n    needs: test\n    runs-on: ubuntu-latest\n    name: Deploy on Qovery\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Deploy on Qovery\n        uses: Qovery/qovery-action@v0.10\n        id: qovery\n        with:\n          qovery-organization-id: ${{ inputs.organization-id }}\n          qovery-project-id: ${{ inputs.project-id }}\n          qovery-environment-id: ${{ inputs.environment-id }}\n          qovery-application-ids: ${{ inputs.application-ids }}\n          qovery-api-token: ${{ secrets.api-token }}\n  add-run-id-to-env-name:\n    needs: deploy\n    runs-on: ubuntu-latest\n    name: Add Workflow execution ID to env name\n    env:\n      ENVIRONMENT_ID: ${{ inputs.environment-id }}\n      QOVERY_API_TOKEN: ${{ secrets.api-token }}\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Add Workflow execution ID to env name\n        run: ./.github/scripts/add-run-id-to-env-name.sh\n        shell: bash\n"))),Object(a.b)("li",null,Object(a.b)("h4",{id:"commit-and-push-your-changes"},"Commit and push your changes"),Object(a.b)("p",null,"Push your changes and wait to the workflow execution to finish. Your Qovery environment name should now contain the execution ID of the workflow."),Object(a.b)("p",null,"It might not be the most useful example, but you can be creative and do all kind of things using the Qovery API with GitHub Actions.")))),Object(a.b)("p",null,"For some other use-cases, like ",Object(a.b)("inlineCode",{parentName:"p"},"preview environments"),", you can use the scripts we provide ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://hub.qovery.com/docs/using-qovery/addon/continuous-integration/github-actions/"}),"here"),"."),Object(a.b)("h2",{id:"conclusion"},"Conclusion"),Object(a.b)("p",null,"Integrating Qovery with GitHub Actions enables more complex workflows than just deploying on code push. You can make sure your test suite succeeds before deploying\nor anything else you need, without sacrificing the simplicity of deployment Qovery brings you."))}d.isMDXComponent=!0},438:function(e,t,n){var o;!function(){"use strict";var n={}.hasOwnProperty;function i(){for(var e=[],t=0;t<arguments.length;t++){var o=arguments[t];if(o){var a=typeof o;if("string"===a||"number"===a)e.push(o);else if(Array.isArray(o)&&o.length){var r=i.apply(null,o);r&&e.push(r)}else if("object"===a)for(var l in o)n.call(o,l)&&o[l]&&e.push(l)}}return e.join(" ")}e.exports?(i.default=i,e.exports=i):void 0===(o=function(){return i}.apply(t,[]))||(e.exports=o)}()},439:function(e,t,n){"use strict";n(443);var o=n(0),i=n.n(o),a=n(438),r=n.n(a);n(132);t.a=function(e){var t=e.children,n=e.classNames,o=e.fill,a=e.icon,l=e.type,c=null;switch(l){case"danger":c="alert-triangle";break;case"success":c="check-circle";break;case"warning":c="alert-triangle";break;default:c="info"}return i.a.createElement("div",{className:r()(n,"alert","alert--"+l,{"alert--fill":o,"alert--icon":!1!==a}),role:"alert"},!1!==a&&i.a.createElement("i",{className:r()("feather","icon-"+(a||c))}),t)}},440:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return h}));var o=n(0),i=n.n(o);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=i.a.createContext({}),u=function(e){var t=i.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l({},t,{},e)),n},p=function(e){var t=u(e.components);return i.a.createElement(s.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},d=Object(o.forwardRef)((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,r=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=u(n),d=o,h=p["".concat(r,".").concat(d)]||p[d]||b[d]||a;return n?i.a.createElement(h,l({ref:t},s,{components:n})):i.a.createElement(h,l({ref:t},s))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,r=new Array(a);r[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var s=2;s<a;s++)r[s]=n[s];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},442:function(e,t,n){var o=n(26).f,i=Function.prototype,a=/^\s*function ([^ (]*)/;"name"in i||n(10)&&o(i,"name",{configurable:!0,get:function(){try{return(""+this).match(a)[1]}catch(e){return""}}})},443:function(e,t,n){var o=n(12);o(o.P,"Array",{fill:n(447)}),n(74)("fill")},444:function(e,t,n){"use strict";n(442);var o=n(0),i=n.n(o),a=n(439);t.a=function(e){var t=e.children,n=e.name;return i.a.createElement(a.a,{type:"info",fill:!0,icon:!1,rounded:!0,className:"list--icons list--icons--arrow list--tight list--indent margin-bottom--lg"},i.a.createElement("p",{class:"text--lg margin-bottom--sm",style:{marginTop:"-0.25em"}},"Before you begin, this ",n||"page"," assumes the following:"),t)}},447:function(e,t,n){"use strict";var o=n(28),i=n(75),a=n(27);e.exports=function(e){for(var t=o(this),n=a(t.length),r=arguments.length,l=i(r>1?arguments[1]:void 0,n),c=r>2?arguments[2]:void 0,s=void 0===c?n:i(c,n);s>l;)t[l++]=e;return t}},448:function(e,t,n){"use strict";var o=n(450),i=n(51);function a(e,t){return t.encode?t.strict?o(e):encodeURIComponent(e):e}t.extract=function(e){return e.split("?")[1]||""},t.parse=function(e,t){var n=function(e){var t;switch(e.arrayFormat){case"index":return function(e,n,o){t=/\[(\d*)\]$/.exec(e),e=e.replace(/\[\d*\]$/,""),t?(void 0===o[e]&&(o[e]={}),o[e][t[1]]=n):o[e]=n};case"bracket":return function(e,n,o){t=/(\[\])$/.exec(e),e=e.replace(/\[\]$/,""),t?void 0!==o[e]?o[e]=[].concat(o[e],n):o[e]=[n]:o[e]=n};default:return function(e,t,n){void 0!==n[e]?n[e]=[].concat(n[e],t):n[e]=t}}}(t=i({arrayFormat:"none"},t)),o=Object.create(null);return"string"!=typeof e?o:(e=e.trim().replace(/^(\?|#|&)/,""))?(e.split("&").forEach((function(e){var t=e.replace(/\+/g," ").split("="),i=t.shift(),a=t.length>0?t.join("="):void 0;a=void 0===a?null:decodeURIComponent(a),n(decodeURIComponent(i),a,o)})),Object.keys(o).sort().reduce((function(e,t){var n=o[t];return Boolean(n)&&"object"==typeof n&&!Array.isArray(n)?e[t]=function e(t){return Array.isArray(t)?t.sort():"object"==typeof t?e(Object.keys(t)).sort((function(e,t){return Number(e)-Number(t)})).map((function(e){return t[e]})):t}(n):e[t]=n,e}),Object.create(null))):o},t.stringify=function(e,t){var n=function(e){switch(e.arrayFormat){case"index":return function(t,n,o){return null===n?[a(t,e),"[",o,"]"].join(""):[a(t,e),"[",a(o,e),"]=",a(n,e)].join("")};case"bracket":return function(t,n){return null===n?a(t,e):[a(t,e),"[]=",a(n,e)].join("")};default:return function(t,n){return null===n?a(t,e):[a(t,e),"=",a(n,e)].join("")}}}(t=i({encode:!0,strict:!0,arrayFormat:"none"},t));return e?Object.keys(e).sort().map((function(o){var i=e[o];if(void 0===i)return"";if(null===i)return a(o,t);if(Array.isArray(i)){var r=[];return i.slice().forEach((function(e){void 0!==e&&r.push(n(o,e,r.length))})),r.join("&")}return a(o,t)+"="+a(i,t)})).filter((function(e){return e.length>0})).join("&"):""}},449:function(e,t,n){"use strict";var o=n(0),i=n.n(o),a=(n(438),n(448)),r=n.n(a);n(134);t.a=function(e){var t=e.children,n=e.headingDepth,a=e.hideFeedbackQuestion,l="undefined"!=typeof window?window.location:null,c={title:"Tutorial on "+l+" failed",body:"The tutorial on:\n\n"+l+"\n\nHere's what went wrong:\n\n\x3c!-- Insert command output and details. Thank you for reporting! :) --\x3e"},s="https://github.com/qovery/documentation/issues/new?"+r.a.stringify(c),u=Object(o.useState)(null),p=u[0],b=u[1];return i.a.createElement("div",{className:"steps steps--h"+n},t,!a&&!p&&i.a.createElement("div",{className:"steps--feedback"},"How was it? Did this tutorial work?\xa0\xa0",i.a.createElement("span",{className:"button button--sm button--primary",onClick:function(){return b("yes")}},"Yes"),"\xa0\xa0",i.a.createElement("a",{href:s,target:"_blank",className:"button button--sm button--primary"},"No")),"yes"==p&&i.a.createElement("div",{className:"steps--feedback steps--feedback--success"},"Thanks! If you're enjoying Qovery please consider ",i.a.createElement("a",{href:"https://github.com/qovery/documentation/",target:"_blank"},"starring our Github repo"),"."))}},450:function(e,t,n){"use strict";e.exports=function(e){return encodeURIComponent(e).replace(/[!'()*]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}}}]);