---
$schema: "/.meta/.schemas/guides.json"
title: Create a database
description: How to create a database to your application
series_position: 2
author_github: https://github.com/evoxmusic
tags: ["type: guide", "technology: qovery"]
---
import Steps from '@site/src/components/Steps';
import Assumptions from '@site/src/components/Assumptions';
import Alert from '@site/src/components/Alert';

Every application needs to store data in a database at some point. You'll learn how to get a production-grade database from Qovery in just a
few seconds in this guide.

<Assumptions>

* You have already deployed an application with Qovery

</Assumptions>

## Tutorial

Qovery supports most popular SQL and NoSQL databases (You can see the complete list [here][docs.database]). In this guide we will deploy a
PostgreSQL database and connect it to our NodeJS app.

<Steps headingDepth={3}>
<ol>

<li>

### Create a PostgreSQL database

<div class="video-container">
  <p align="center">
    <iframe src="https://www.loom.com/embed/a76f72ede22c47048009fe874c2c6b03" width="100%" height="100%" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen>
    </iframe>
  </p>
</div>

</li>

<li>

### Connect your application

Now, we need to connect our application to our database. The credentials (URI, Username, Password ...) are available
through [environment variables][docs.environment-variable]. They are injected by Qovery when your application runs.

To connect our NodeJS application to our PostgreSQL database, we only have to:

- Use the NodeJS PostgreSQL client ([pg](https://node-postgres.com/features/connecting))
- Use `QOVERY_DATABASE_MY_DB_CONNECTION_URI` into our code

Add the `pg` dependency into `package.json`

```json
{
  /* ... */
  "dependencies": {
    /* ... */
    "pg": "^7.17.0"
  }
}
```

Connect our application to PostgreSQL ([see documentation](https://node-postgres.com/features/connecting))

```javascript
const { Pool } = require('pg')

const pool = new Pool({
  connectionString: process.env.QOVERY_DATABASE_MY_DB_CONNECTION_URI,
})

// your can use your connection pool now ...
```

Nothing more, well done! You can now be able to use your database.

</li>

</ol>
</Steps>

## Next Steps

Congratulations, your application has access to your PostgreSQL database. Now we will see how to add your custom domain to your service.

<%= subpages() %>
