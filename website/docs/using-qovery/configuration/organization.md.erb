---
title: "Organization"
description: "Learn how to configure Organizations on Qovery"
---
import Assumptions from '@site/src/components/Assumptions';

<Assumptions name="documentation">

* You have a [created an account][docs.using-qovery.interface].

</Assumptions>

An organization is a shared account where developers can collaborate across many projects at once. Owners and organization administrators
can manage:

- cloud accounts.
- members access.
- the billing.
- the container registry accessible within the organization.
- the git repositories accessible within the organizatin (only for GitHub)

## Creating an Organization

When signing up for Qovery, you need to create an organization. You can choose between 4 plans: **Free**, **Professional**, **Business** and **Enterprise**:

<p align="center">
  <img src="/img/configuration/organization/Qovery_Pricing_Plans.png" alt="Qovery Pricing Plans" />
</p>

For more information, see [our pricing page] [urls.qovery_pricing].

Once you have chosen a plan, you need to sign in through your Git provider (Github, Gitlab or Bitbucket). Your organization is then created. 

To  manage your organization settings from the [Qovery Console][urls.qovery_console], click the cogwheel icon on the top right of the screen:

<p align="center">
  <img src="/img/configuration/clusters/Organization_Settings_Access_Button.png" alt="Organization Settings Access" />
</p>

In the `General Information` tab:

<p align="center">
  <img src="/img/configuration/organization/General_Information_Organization_Settings.png" alt="Organization Settings Access" />
</p>

* **Company name**: enter the name of your company.
* **Description**: enter a description of your organization.
* **Website**: enter the website of your company.
* **Admin contact emails**: enter one or several email adresses (separated by commas) on which you want to receive important communications from Qovery.

<Alert type="info">

We will **only** use your admin contact email details to send you communications about infrastructure outages, maintenance updates, and weekly and monthly usage reports.

</Alert>

Don't forget to click `Update` to save your organization information!

## Managing your clusters

With Qovery, you can manage multiple clusters in your organizations settings. You can then deploy your project environments and services to the cluster of your choice.

In the settings of your organization, you can add, stop and delete a cluster, as well as update its settings.

<p align="center">
  <img src="/img/configuration/organization/multi-clusters.png" alt="Qovery - Manage multiple clusters in your organization" />
</p>

For more information, see [Clusters][docs.using-qovery.configuration.clusters].


#### What is the default cluster? 

The default cluster is the first cluster you installed in your organization. 

When you create a new environment and leave the `mode` and `cluster` parameters set to the value `Automatic`, your environment is deployed to:
* the cluster defined in one of [your project rules][docs.using-qovery.configuration.deployment-rule#environment-deployment-rules],
* or to the default cluster if no project rule applies.

For more information on deployment rules, see [Project][docs.using-qovery.configuration.project].

## Organization members

This section allows you to manage the members of your organization (add / remove) and as well assign a role to each of them.

You can invite someone to join your organization by email. Then he will get access to your projects and will be able to contribute.

<p align="center">
  <img src="/img/configuration/organization/members.png" alt="Qovery - List all members within an organization" />
</p>


<Alert type="info">

Changing the role of a member requires the user to logout/login to make the changes effective or wait a few minutes (max 1 hour)

</Alert>

### Roles-Based access control (RBAC)

Qovery allows you to control the access to your cluster and environment resources by defining and assigning  roles to your users.

By default, five roles are created within your organization (Basic Roles):
- Owner: the user has full access on the organization
- Admin: same as the owner, the has full access to the organization but he cannot delete it
- DevOps: the user can manage the organization infrastructure (clusters/registry/webhook setup) and manage the deployments of any environment within the organization.
- Billing Manager: the user can only manage the billing of the organization
- Viewer: the user has read-only access to any section of the organization

More in detial, you can find the associated permissions below:

| Action | Owner | Admin | DevOps | Billing Manager | Viewer |
|--------|-------|-------|-----------|--------|--------|
| Read organization | yes | yes | yes | yes | yes |
| Edit organization | yes | yes | no | no | no |
| Delete organization | yes | no | no | no | no |
| Manage billing  | yes | yes | no | yes | no |
| Manage members & roles | yes | yes | no | no | no |
| Manage cluster & contrainer registry | yes | yes | yes | no | no |
| Manage organization setup (webhooks, API tokens etc..) | yes | yes | yes | no | no |
| Read ANY project | yes | yes | yes | no | yes |
| Edit/Delete ANY project | yes | yes | no | no | no |
| Create project | yes | yes | no | no | no |
| Read ANY environment | yes | yes | yes | no | yes |
| Edit/Delete ANY environment or service | yes | yes | no | no | no |
| Create environment or service | yes | yes | no | no | no |
| Deploy/Stop ANY environment or service | yes | yes | yes | no | no |
| Connect via SSH to ANY application | yes | yes | yes | no | no |

<Alert type="info">

Only one user can be Owner of an organization. You can transfer the ownership to another member via the menu available on the target member

</Alert>

### Custom roles
If the basic roles are not enough given your internal organization, Qovery allows you to customize the accesses to your clusters, projets and environments by defining `Custom Roles`.

A `Custom role` allows you to customize:
- Cluster Level Permissions: you can specify the access to the existing computing resources (manage cluster X, create environments on cluster Y, read-only access on cluster K)
- Project Level Permissions: you can specify the access to the projects and their environments by environment type (deploy type X, create type K etc..)

<Alert type="info">

Users with a custom role cannot create clusters or manage any of the organization settings (members, webhook, API token etc..)

</Alert>

To create a custom role, go in the Roles & Permissions section press "Add new Role"

For the new role, you will be able to specify:
- The name of the role
- A description
- Cluster Level permissions
- Project Level Permissions

##Cluster Level Permissions
This section allows you to fine tune the access to the computing resources. For each cluster of your organization, you will be able to specify an access permission (ordered by permission level):

| Name | Permission Type |
|--------|-------|
| Read-Only | The user can access the cluster information (name, region etc..). Minimum permission level.
| Create Environment | The user can create environments on this cluster. Only users with this role could allocate resources for their environments on this cluster. Further environment level permissions (like deployment rights) are managed via the "Project Permissions", see below |
| Full Access | The user can create create environments on this cluster and as well manage the cluster's settings (start/stop, change number and type of nodes etc..). This permission allows a group of users to manage by themselves a specific cluster |


- Project Level Permissions
This section allows you to fine tune the access to the projects and their environments. The environment access is managed by "Environment Type" to simplify the configuration (Production, Staging, Development, Preview). For each project of your organization and by environment type, you will be able to specify an access permission (ordered by permission level):

| Name | Permission Type |
|--------|-------|
| No Access | The user has no access to this environment type. If the user has "No Access" on all the environment types, he will not have access to the project |
| Read-Only | Access in read-only to this environment type. Useful to restrict access on sensitive environments |
| Deploy | Manage the deployments of this environment type, access the logs, connect via SSH to the application and manage its environment variables |
| Manage | Manage the deployments and the settings of this environment type (including adding or removing services) |
| Full Access | The user is admin of the project and can do everything he wants on it (no matter the environment type) |

<p align="center">
  <img src="/img/configuration/organization/custom_role_creation.png" alt="Qovery - custom role" />
</p>

Once the role is created, you can assign it to a member of your organization within the "Members" section. You can also update the permissions by editing the role from the Roles&Permissions screen

### Examples
Within this section, we will try to provide you some example of roles & permission setup

*Example 1, simple setup*: An organization has 3 clusters ("prod cluster", “staging cluster”, “dev cluster”) and 1 project P1. The organization has a CTO, a devops and some developers.
The roles & permissions could be configured in this way:
- CTO = Owner
- Devops = Devops or Admin
- Developers: we want these users capable of accessing the project, having read access to the prod clusters/env, managing deployments on the staging cluster (but not creating new environments on it) and doing whatever they want for the development environments on the dev cluster. So the configuration will look like:
    - Create a new Role “developer” with the following permissions:
        - Cluster Level Permissions:
            - Prod cluster → Read-Only
            - Staging cluster → Read-Only
            - Dev cluster → Create Environment (they can create environments on this cluster)
        - Project Level Permissions for the project "P1":
            - Environment access (by env type)
              - prod = Read-Only
              - staging = deploye (i.e. they can deploy env of type “staging”)
              - development = Full Access  (i.e. they can manage and create env of type “dev”)

*Example 2, advanced setup*: An organization with 4 dev clusters (“prod cluster”, “staging clyster”, 2 Dev clusters called “dev cluster team 1” and "dev cluster team 2”) and 2 projects P1 and P2. The organization has a CTO, a devops, 2 dev teams with an “acting dev-ops” in it who manages the dev cluster on behalf of the devops. 
The roles & permissions could be configured in this way:
- CTO = Owner
- Devops = Devops or Admin
- Dev team 1: we want these users capable of accessing the project P1, having no access to the prod env and managing their deployments only on the "dev cluster Dev team 1" for their development environments.So the config will look like:
  - Create a new Role “Dev Team 1”
    - Cluster Level Permissions:
        - Prod cluster → Read-Only
        - Staging cluster → Read-Only
        - Dev cluster team 1 → Create Environment (they can create envs only on their dev cluster)
        - Dev cluster team 2 → Read-Only
    - Project Level Permissions:
        - Config on the project “P1”
            - Environment access (by env type)
                - prod = no-access
                - staging = deploy
                - dev = Full Access (i.e. they can do whatever they want on env of type “dev”)
        - Config on the project “P2” (i.e. they can't access P2)
          - Environment access (by env type)
            - prod = no-access
            - staging = no-access
            - dev = no-access
- Dev team 2: we want these users capable of accessing the project P2, having no access to the prod env and managing their deployments only on the "dev cluster team 2" for their development environments. So the config will look like:
  - Create a new Role “Dev Team 2”
    - Cluster Level Permissions:
        - Prod cluster → Read-Only
        - Staging cluster → Read-Only
        - Dev cluster team 1 → Read-Only
        - Dev cluster team 2 → Create Environment (they can create envs only on their dev cluster)
    - Project Level Permissions:
        - Config on the project “P1” (i.e. they can't access P1)
          - Environment access (by env type)
            - prod = no-access
            - staging = no-access
            - dev = no-access
        - Config on the project “P2”
            - Environment access (by env type)
                - prod = no-access
                - staging = deploy
                - dev = Full Access (i.e. they can do whatever they want on env of type “dev”)
- Acting DevOps user: we want this user capable of accessing the project, having read access to the prod env, managing the dev clusters and all the environments on it. So the config will look like this:
    - Create a new Group “Acting DevOps”
        - Cluster Level Permissions:
            - Prod cluster → Read-Only
            - Staging cluster → Create Environment
            - Dev1 cluster → Full Access
            - Dev2 cluster → Full Access
        - Project permissions settings
            - Config on the project “P1”
                - Admin (i.e.: full access to the project)
            - Config on the project “P2”
                - Admin (i.e.: full access to the project)

              
## Change an Organization

As a user, you can have access to one or many organizations. Use the dropdown in the top right navbar to change your organization.

<p align="center">
  <img src="/img/configuration/organization/change_organization.png" alt="Qovery - change organization" />
</p>

## Delete an Organization

<Alert type="danger">

This is a non-recoverable operation. By deleting your organization, all your data are deleted.

</Alert>

To delete your organization, you need to go into the **Danger Zone** within your organization settings.

<p align="center">
  <img src="/img/configuration/organization/delete_organization.png" alt="Qovery - delete organization" />
</p>

## Managing Git Permissions Using the Qovery Github App

When you first sign into the [Qovery Console][urls.qovery_console], you need to provide your Git provider account credentials. This allows you to later take advantage of a Single Sign-On process through your Git provider. 
However, by default, Qovery is then allowed to access all the resources stored on your Git provider account. 

For better control, as a Github user, you can install the **Qovery Github App**, and define which Github repositories Qovery can access.
<Alert type="info">

You can only link one Github Organization to your Qovery Organization through the **Qovery Github App**. 
Also, once the **Qovery Github App** is installed, all the members of your Qovery Organization will only have access to the repositories linked to your **Qovery Github App**.

</Alert>

### Installing the Qovery Github App


<Alert type="warning">

If you have already one or more applications running on your Qovery Organization, please make sure to give the **Qovery Github App** access to their repositories. If a repository is missing, you might experience a loss of functionalities for those applications (update, auto-deploy, preview environments, etc.).

</Alert>


To install the **Qovery Github App**:

<Steps headingDepth={3}>
<ol>
<li>

Open your [Qovery Console][urls.qovery_console] and access your organization settings:

<p align="center">
  <img src="/img/configuration/organization/access_settings.png" alt="How to access your organization settings" />
</p>

</li>
<li>

In the `Organization settings` menu, click `Git Repository Access`:

<p align="center">
  <img src="/img/configuration/organization/git_repository_access.png" alt="Git Repository Access" />
</p>

</li>
<li>

To start the installation process click `Install`:

A new window opens in your browser so you can install the **Qovery Github App** on your Github account.
</li>
<li>

Click the Github account on which you want to install the **Qovery Github App**:

<p align="center">
  <img src="/img/configuration/organization/Install_GithubApp_Access.png" alt="Application" />
</p>

</li>
<li>

Click `Only select repositories` and, in the dropdown menu, define which Github repositories you want to give Qovery access to:


<p align="center">
  <img src="/img/configuration/organization/Repositories_Selection.png" alt="Application" />
</p>

<Alert type="info">

You need to give Qovery access to any Github repository linked to an existing Qovery application. 
Failure to do so will result in the loss of some functionalities (update, auto-deploy, preview environments, etc.).

</Alert>

</li>
<li>

To confirm, click `Install & Authorize`:

<p align="center">
  <img src="/img/configuration/organization/Confirmation_Window_GithubApp.png" alt="Application" />
</p>

You are redirected to your Qovery Console, where the list of authorized Github repositories is updated.

<Alert type="info">

You can update or revoke access to one or multiple Github repositories at any time. To do so, in the `Git Repository Access` section, click `Manage Permission` below your Git provider account, and repeat the selection process on the Github website.
Please note that the repositories must belong to the same Github organization, we do not support yet a multi-github organization setup

</Alert>

</li>
</ol>
</Steps>

### Managing the Github permissions

To add or remove access to one of your repositories:

<Steps headingDepth={3}>
<ol>
<li>

Open your [Qovery Console][urls.qovery_console] and access your organization settings:

<p align="center">
  <img src="/img/configuration/clusters/Organization_Settings_Access_Button.png" alt="Qovery - delete organization" />
</p>

</li>
<li>

In the `Organization settings` menu, click `Git Permission`:

<p align="center">
  <img src="/img/configuration/organization/Git_Permissions_Tab.png" alt="Application" />
</p>

</li>
<li>

Next to your Git provider account, click `Manage permission`:

<p align="center">
  <img src="/img/configuration/organization/Github_App_Disconnect.png" alt="Application" />
</p>

</li>

<li>

Click the Github account on which you want to manage the **Qovery Github App** access:

<p align="center">
  <img src="/img/configuration/organization/Install_GithubApp_Access.png" alt="Application" />
</p>

</li>
<li>

Add or remove the repositories you want to give Qovery access to:


<p align="center">
  <img src="/img/configuration/organization/Repositories_Selection.png" alt="Application" />
</p>

<Alert type="warning">

Rremoving access to a Github repository linked to an existing Qovery application will result in the loss of some functionalities for that application (update, auto-deploy, preview environments, etc.).

</Alert>

</li>

</ol>
</Steps>

### Uninstalling the Qovery Github App

<Alert type="warning">

Uninstalling the **Qovery Github App** will result in a loss of some functionalities for all your applications (update, auto-deploy, preview environments, etc.).

</Alert>


To uninstall the **Qovery Github App**:

<Steps headingDepth={3}>
<ol>
<li>

Open your [Qovery Console][urls.qovery_console] and access your organization settings:

<p align="center">
  <img src="/img/configuration/clusters/Organization_Settings_Access_Button.png" alt="Qovery - delete organization" />
</p>

</li>
<li>

In the `Organization settings` menu, click `Git Permission`:

<p align="center">
  <img src="/img/configuration/organization/Git_Permissions_Tab.png" alt="Application" />
</p>

</li>
<li>

Next to your Git provider account, click `Disconnect`:

<p align="center">
  <img src="/img/configuration/organization/Github_App_Disconnect.png" alt="Application" />
</p>

The list of authorized Github repositories is updated, meaning Qovery now has access to all of your Github repositories again.
</li>
<li>

From your browser, access your Github account and open your `Settings`:

<p align="center">
  <img src="/img/configuration/organization/Github_Settings.png" alt="Application" />
</p>

</li>
<li>

In the navigation menu, click `Applications`:


<p align="center">
  <img src="/img/configuration/organization/Github_Applications_Menu.png" alt="Application" />
</p>

</li>
<li>

At the bottom of the page, click `Uninstall`:

<p align="center">
  <img src="/img/configuration/organization/GithubApp_Uninstall_Finalize.png" alt="Application" />
</p>

A confirmation pop-up window opens.
</li>
<li>

Click `OK`:

The **Qovery Github App** is uninstalled.
</li>
</ol>
</Steps>

## Billing

<Alert type="info">

To know more on how much Qovery costs - see our [pricing page][urls.qovery_pricing].

</Alert>


## Container Registry management 

This section allows you to define the list of container registries that can be used within your organization. Only images stored on those container registries are allowed to be deployed on your cluster.

You can access this section by opening the Organization Settings -> Container Registries

<p align="center">
  <img src="/img/configuration/organization/container_1.png" alt="Application" />
</p>

<Alert type="info">

When accessing the interface for the first time, you will see that a container registry already exist (called "registry-{$UIID}"). This container registry is created by Qovery on your infrastructure and is used to manage the deployment of your applications. You are free to use them to store your applications but you need to retrieve the credentials from your cloud provider console.

</Alert>

### Create a Container Registry
<p align="center">
  <img src="/img/configuration/organization/container_creation.png" alt="Application" />
</p>

By clicking on "Add Registry" you will be able to create a new Container Registry by filling these information:
- Registry Name
- Description
- Registry Url: the base url of the registry (example: https://docker.io, https://public.ecr.aws etc..)
- Registry type: you can chose among DockerHub, Public ECR, ECR (AWS private CR), Scaleway CR (Scaleway private CR)
- Credentials: these depends on the chosen registry type. If a container registry is public, you don't need to fill this part. 

<Alert type="info">

We encourage you to set credentials for Docker Hub due to the limits on the pull rate. [See here](https://www.docker.com/increase-rate-limits/) for more details

</Alert>

Now that you have created the registry, you can start using it in order to [create and deploy a service][docs.using-qovery.configuration.application#deploying-from-a-container-registry] using the images stored within it.

### Modify or Delete an existing registry
You can modify an existing container registry by clicking on the "Wheel" button next to it
You can delete an existing container registry by clicking on the "Trash" button next to it

<Alert type="alert">

Before deleting it, make sure that there is no application within your organization using an image stored in this registry.

</Alert>

<p align="center">
  <img src="/img/configuration/organization/container_edit.png" alt="Application" />
</p>