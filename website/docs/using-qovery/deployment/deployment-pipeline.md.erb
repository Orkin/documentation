---
title: "Deployment Pipeline"
description: "Learn how to the Environment Deployment Pipeline works"
---
import Jump from '@site/src/components/Jump';
import Alert from '@site/src/components/Alert';
import Assumptions from '@site/src/components/Assumptions';

<Assumptions name="documentation">

You have created an [Environment][docs.using-qovery.configuration.environment] and one Service (application, db or job)

</Assumptions>

When the deployment of an environment is triggered, Qovery executes what we call `Deployment Pipeline`. It basically defines which operation shall be performed to properly deploy every service defined within your environment (build the code of service X, push the image on a registry, deploy service X on the Kubernetes cluster etc..)

A pipeline is composed of an ordered list of `Deployment Stages`. Each Stage has an execution order assigned within the pipeline: If a stage A has an execution order lower than stage B then B can be executed only if the execution of stage A is completed.

Each service of your environment belongs to one (and only one) `Deployment Stage`. This allows you to define at which moment of the deployment pipeline a service should be deployed and thus respect any service inter-dependency (e.g. your front-end needs to be started after the back-end, your db needs to be started before your back-end etc..).

During the deployment, a service goes through the building and deployment phase (as [explained here][docs.using-qovery.deployment.deployment-actions#deploy]). The build and deploy operation of each service within a deployment stage can be executed in parallel (feature WIP)

Below you can find a visual example of how the pipeline looks like
<p align="center">
  <img src="/img/deployment/example_deployment_pipeline.png" alt="Deployment Pipeline" />
</p>


## Default Pipeline

By default, the deployment pipeline is constituted of 4 deployment stages with a default service assignment rule:
- "0.DEFAULT DATABASE": any new service of type `DATABASE` will be added to this stage.
- "1.DEFAULT JOB": any new service of type `JOB` will be added to this stage.
- "2.DEFAULT CONTAINER": any new service of type `CONTAINER` will be added to this stage (application deployed from a container image).
- "3.DEFAULT APPLICATION": any new service of type `APPLICATION` will be added to this stage (application deployed from a git repository).

<p align="center">
  <img src="/img/deployment/default_deployment_pipeline.png" alt="Default Deployment Pipeline" />
</p>

Once the service is created, the assigned stage can be modified afterwards. See [this section][docs.using-qovery.configuration.environment#deployment-pipeline] for more information.

<Alert type="info">

This default assignment is maintained as long as you do not delete or rename the default stage. If the default stage is modified or deleted, the service will be automatically added to the latest stage (based on the stage deployment)

</Alert>

## Visualizing and Modifying the Pipeline

You can access and modify the pipeline configuration from the environment settings. Have a look at [this section][docs.using-qovery.configuration.environment#deployment-pipeline] to know more.
