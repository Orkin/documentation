---
last_modified_on: "2020-10-04"
title: "GitLab CI"
description: "Learn how to connect GitLab CI to Qovery"
---
import Assumptions from '@site/src/components/Assumptions';

Using Gitlab CI with Qovery is super powerful and gives you the ability to manage the way that you want to deploy your applications. As the possibility are endless, I will share with you a couple of examples that you can use. Feel free to adapt them to your need.

<%= qovery_continuous_integration_common_prerequisites() %>

## GitLab CI Examples

### Deploy a container application

<Assumptions>

* You have [connected your Container Registry with Qovery][docs.using-qovery.configuration.organization#container-registry-management].
* You have a container application that you want to deploy on Qovery.
* You have set the `QOVERY_CLI_ACCESS_TOKEN` environment variable in your GitLab CI project.

</Assumptions>

This example will deploy a container application with Qovery from your GitLab CI pipeline. Feel free to adapt it to your need.

```yaml title=".gitlab-ci.yml"
# 1. Build and Push image to a remote registry
# 2. Deploy with Qovery

stages:
  - build-and-push
  - deploy

build-and-push-image:
  stage: build-and-push
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build . --tag my-registry-group/your-app:$CI_COMMIT_SHORT_SHA
    - docker push my-registry-group/your-app:$CI_COMMIT_SHORT_SHA

deploy-image-with-qovery:
  stage: deploy
  script:
    - curl -s https://get.qovery.com | bash # Download and install Qovery CLI
    - |
      qovery container deploy \
        --organization <your_org_name> \
        --project <your_project_name> \
        --environment <your_environment_name> \
        --container <your_qovery_container_name> \
        --tag $CI_COMMIT_SHORT_SHA \
        --watch
```

<%= qovery_continuous_integration_common_scenarios() %>
